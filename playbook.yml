# https://faun.pub/create-an-aws-vpc-subnet-security-group-and-acl-using-ansible-5a16aaa1042e
# first draft is working. Need to edit subnets and other properties on next revision as well as implement updated security protocol
# Create EC2 instance and use playbook to configure wordpress on it 
---
- hosts: localhost  # put localhost.  We are processing against aws
  connection: local  # put local.  We are processing against aws
  gather_facts: False  # don't gather facts against localhost
  vars:
    vpc_title: 'Ansible'
    vpc_name: "{{ vpc_title }} VPC"
    igw_name: "{{ vpc_title }} IGW"
    subnet_name: "{{ vpc_title }} Subnet"
    acl_name: "{{ vpc_title }} ACL"
    security_group_name: "{{ vpc_title }} Security Group"
    route_table_name: "{{ vpc_title }} route table"
    vpcCidrBlock: '10.0.0.0/16'
    subNetCidrBlock: '10.0.1.0/24'
    port22CidrBlock: '0.0.0.0/0'
    destinationCidrBlock: '0.0.0.0/0'
    state: 'present'
    zone: 'us-east-1a'
    region: 'us-east-1'
    # instance1ID: 
    # instance2ID: 

  tasks:
  - name: create a new VPC
    #create a vpc with name, cidr block,dns support, and tenancy
    ec2_vpc_net:
      name: "{{ vpc_name }}" 
      cidr_block: "{{ vpcCidrBlock }}"
      region: "{{ region }}"
      # enable dns support 
      dns_support: yes
      # enable dns hostnames
      dns_hostnames: yes
      tenancy: default
      state: "{{ state }}"
    register: ec2_vpc_net_result

  - name: create ec2 vpc internet gateway       
    # create an internet gateway for the vpc
    ec2_vpc_igw:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}" 
      tags:
        Name: "{{ igw_name }}"
    register: igw_result
    
  - name: create vpc subnet Public 1A
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      # DefaultForAz: true, 
      cidr: "10.0.0.0/24"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name }}Public1A"
    register: subnet1A_result

  - name: create vpc subnet Public 1B
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "us-east-1b"      # az is the availability zone
      state: "{{ state }}"
      cidr: "10.0.1.0/24"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name }}Public1B"
    register: subnet1B_result

  - name: create vpc subnet Private 1a
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      cidr: "10.0.2.0/24"
      # enable public ip
      map_public: no
      resource_tags:
        Name: "{{ subnet_name }}Private1A"
    register: subnet1APrivate_result 

  - name: create vpc subnet Private 1b
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "us-east-1b"      # az is the availability zone
      state: "{{ state }}"
      cidr: "10.0.3.0/24"
      # enable public ip
      map_public: no
      resource_tags:
        Name: "{{ subnet_name }}Private1B"
    register: subnet1BPrivate_result

  - name: create ec2 security group 
    # create a security group for the vpc
    ec2_group:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ security_group_name }}"
      description: "{{ security_group_name }}"
      tags:
        Name: "{{ security_group_name  }}"
      rules:
      - proto: tcp
        ports:
        - 22
        - 80
        - 81
        cidr_ip: "{{ port22CidrBlock }}"
        rule_desc: allow all on ports 22, 80 and 81
    register: security_group_results

  - name: create ec2 VPC Network access control list
    # create the access control list with ingress and egress ports 
    ec2_vpc_nacl:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ acl_name }}"
      subnets: [ "{{ subnet1A_result.subnet.id }}" ]
      tags:
        Name: "{{ acl_name }}"
        Description: "{{ acl_name }}"
      # ingress acl rules
      ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow ingress port 22
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow ingress port 80
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow icmp
        - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
        # allow ingress ephemeral ports
        - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      # egress acl rules
      egress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow egres port 22 
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow egres port 80 
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow egress ephemeral ports
        - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
    register: acl_results

  - name: create ec2 VPC public subnet route table
    # create route table and connect subnet to routes
    ec2_vpc_route_table:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ route_table_name }}"
      subnets: [ "{{ subnet1A_result.subnet.id }}","{{ subnet1B_result.subnet.id }}"  ]   
      # create routes
      routes:
        - dest: "{{ destinationCidrBlock }}" 
          gateway_id: "{{ igw_result.gateway_id }}"
    register: public_route_table
    
  - name: print out new vpc, subnet id, and security group for vpc
    # print out new subnet id and security group
    debug:
      msg: "To use the new created VPC: {{ vpc_name }}; Use subnet id: {{ subnet1A_result.subnet.id }} and security group: {{ security_group_results.group_id }} to create your AWS instances "




# Create EC2 instance in Public1A subnet
# assign Ansible Security Group

  - name: Provision instance (s)
    ec2:
          image: "ami-0e472ba40eb589f49"
          id: AnsibleX
          instance_type: t2.micro
          group_id: sg-060557f4bb6d83d36
          region: "{{ region }}"
          wait: true
          count: 1
          vpc_subnet_id: "{{ subnet1A_result.subnet.id }}"
          assign_public_ip: yes
          instance_tags:
            Name: AnsibleEC2Public1A
          # group_id: "{{ result_sec_group.group_id }}"
    register: ec2_instances
    
    
    # debug:
    # msg: "EC2 Public 1A id is: {{ ec2_instances.instance_id }} "




  # Create ec2 in public 1B
  # assign Ansible Security Group

  - name: Provision instance (s)
    ec2:
          image: "ami-0e472ba40eb589f49"
          id: AnsibleY
          instance_type: t2.micro
          group_id: sg-060557f4bb6d83d36
          region: "{{ region }}"
          wait: true
          count: 1
          vpc_subnet_id: "{{ subnet1B_result.subnet.id }}"
          assign_public_ip: yes
          instance_tags:
            Name: AnsibleEC2Public1B
    register: ec2_instances

  - name: Store EC2 instance IPs to provision against
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: ec2_instance_ips
    with_items: "{{ ec2_instances.tagged_instances }}"

  - name: Wait for servers to come online
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22
      timeout: 180
    with_items: "{{ ec2_instances.tagged_instances }}"

  - name: Add EC2 instances as known hosts
    known_hosts:
      name: "{{ item.public_ip }}"
      key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
    with_items: "{{ ec2_instances.tagged_instances }}"

  # Get info for 2 instance ID's to use in TargetGroup
  # Assign ID's to instances
  # attach them to target group


  - name: Create a target group with instance targets
    elb_target_group:
      name: AnsibleTargetGroup
      protocol: http
      port: 80
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      health_check_protocol: http
      health_check_path: /
      successful_response_codes: "200,250-260"
      targets:
        - Id: i-073e0fd8f30372908
          Port: 80
        - Id: i-0db324f0743996c36
          Port: 80
      state: present
      wait_timeout: 200
      wait: True


# Create an ELB and attach a listener
  - name: Create the ELB only listening over port 80
    elb_application_lb:
      name: AnsibleALB
      security_groups:
        - "{{ security_group_name }}"
        # - my-sec-group
      subnets:
        - subnet-08023a6b472affed8
        - subnet-0c48347107195c11c
      # health_check:
      #   ping_protocol: http
      #   ping_port: 80
      #   ping_path: "index.html"
      #   response_timeout: 5
      #   interval: 30
      #   unhealthy_threshold: 2
      #   healthy_threshold: 2
      listeners:
        - Protocol: HTTP # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
          Port: 80 # Required. The port on which the load balancer is listening.
          # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
          # SslPolicy: ELBSecurityPolicy-2015-05
          # Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
          #   - CertificateArn: arn:aws:iam::12345678987:server-certificate/test.domain.com
          DefaultActions:
            - Type: forward # Required. Only 'forward' is accepted at this time
              TargetGroupName: AnsibleTargetGroup # Required. The name of the target group
      state: present

 # Create Autoscaling group AnsibleASG
  # - name: Create Ansible Auto Scaling Group
  #   ec2_asg:
  #     name: AnsibleASG
  #     launch_config_name: AnsibleWordPress
  #     health_check_period: 60
  #     health_check_type: ELB
  #     replace_all_instances: yes
  #     min_size: 2
  #     max_size: 2
  #     desired_capacity: 2
  #     region: us-east-1

   # Create Basic Launch Configuration
  # - name: Create ec2 Launch Configuration
  #   ec2_lc:
  #     name: "AnsibleWordPress"
  #     image_id: ami-0e472ba40eb589f49 
  #     instance_type: t2.micro
  #     security_groups: "{{ security_group_name }}"
  #     region: "{{ region }}"



#  # Basic Load Balancer
#   - name: Create the ELB only listening over port 80
#     ec2_elb_lb:
#     # elb_classic_lb:
#       name: AnsibleLoadBalancer
#       state: present
#       region: us-east-1
#       # subnets: "{{ subnet_name }}Public1A, {{ subnet_name }}Public1B"
#       cross_az_load_balancing: yes
#       zones:
#         # - us-east-1a
#         - us-east-1b
#       scheme: internet-facing  
#       health_check:
#         ping_protocol: http
#         ping_port: 80
#         ping_path: "index.html"
#         response_timeout: 5
#         interval: 30
#         unhealthy_threshold: 2
#         healthy_threshold: 2
#       tags: 
#         name: AnsibleLB
#         security_group_names: "{{ security_group_name }}"
#       listeners:
#         - protocol: http
#           load_balancer_port: 80
#           instance_port: 80
#         #   proxy_protocol: True
#         # - protocol: https
#         #   load_balancer_port: 443
#         #   instance_protocol: http
#         #   instance_port: 80 
#     # register: elb
#         - DefaultActions:
#           - Type: forward # Required. Only 'forward' is accepted at this time
#             TargetGroupName: AnsibleTargetGroup # Required. The name of the target group
#       state: present